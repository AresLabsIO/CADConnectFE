/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutRouteImport } from './routes/logout.route'
import { Route as LoginRouteImport } from './routes/login.route'
import { Route as CallbackRouteImport } from './routes/callback.route'
import { Route as IndexRouteImport } from './routes/index.route'
import { Route as RecordsIndexImport } from './routes/records.index'
import { Route as RecordsDataIdIndexImport } from './routes/records.$dataId.index'
import { Route as RecordsDataIdRecordIdImport } from './routes/records.$dataId.$recordId'

// Create/Update Routes

const LogoutRouteRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRouteRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CallbackRouteRoute = CallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => rootRoute,
} as any)

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RecordsIndexRoute = RecordsIndexImport.update({
  id: '/records/',
  path: '/records/',
  getParentRoute: () => rootRoute,
} as any)

const RecordsDataIdIndexRoute = RecordsDataIdIndexImport.update({
  id: '/records/$dataId/',
  path: '/records/$dataId/',
  getParentRoute: () => rootRoute,
} as any)

const RecordsDataIdRecordIdRoute = RecordsDataIdRecordIdImport.update({
  id: '/records/$dataId/$recordId',
  path: '/records/$dataId/$recordId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/callback': {
      id: '/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/records/': {
      id: '/records/'
      path: '/records'
      fullPath: '/records'
      preLoaderRoute: typeof RecordsIndexImport
      parentRoute: typeof rootRoute
    }
    '/records/$dataId/$recordId': {
      id: '/records/$dataId/$recordId'
      path: '/records/$dataId/$recordId'
      fullPath: '/records/$dataId/$recordId'
      preLoaderRoute: typeof RecordsDataIdRecordIdImport
      parentRoute: typeof rootRoute
    }
    '/records/$dataId/': {
      id: '/records/$dataId/'
      path: '/records/$dataId'
      fullPath: '/records/$dataId'
      preLoaderRoute: typeof RecordsDataIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/callback': typeof CallbackRouteRoute
  '/login': typeof LoginRouteRoute
  '/logout': typeof LogoutRouteRoute
  '/records': typeof RecordsIndexRoute
  '/records/$dataId/$recordId': typeof RecordsDataIdRecordIdRoute
  '/records/$dataId': typeof RecordsDataIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/callback': typeof CallbackRouteRoute
  '/login': typeof LoginRouteRoute
  '/logout': typeof LogoutRouteRoute
  '/records': typeof RecordsIndexRoute
  '/records/$dataId/$recordId': typeof RecordsDataIdRecordIdRoute
  '/records/$dataId': typeof RecordsDataIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/callback': typeof CallbackRouteRoute
  '/login': typeof LoginRouteRoute
  '/logout': typeof LogoutRouteRoute
  '/records/': typeof RecordsIndexRoute
  '/records/$dataId/$recordId': typeof RecordsDataIdRecordIdRoute
  '/records/$dataId/': typeof RecordsDataIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/callback'
    | '/login'
    | '/logout'
    | '/records'
    | '/records/$dataId/$recordId'
    | '/records/$dataId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/callback'
    | '/login'
    | '/logout'
    | '/records'
    | '/records/$dataId/$recordId'
    | '/records/$dataId'
  id:
    | '__root__'
    | '/'
    | '/callback'
    | '/login'
    | '/logout'
    | '/records/'
    | '/records/$dataId/$recordId'
    | '/records/$dataId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  CallbackRouteRoute: typeof CallbackRouteRoute
  LoginRouteRoute: typeof LoginRouteRoute
  LogoutRouteRoute: typeof LogoutRouteRoute
  RecordsIndexRoute: typeof RecordsIndexRoute
  RecordsDataIdRecordIdRoute: typeof RecordsDataIdRecordIdRoute
  RecordsDataIdIndexRoute: typeof RecordsDataIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  CallbackRouteRoute: CallbackRouteRoute,
  LoginRouteRoute: LoginRouteRoute,
  LogoutRouteRoute: LogoutRouteRoute,
  RecordsIndexRoute: RecordsIndexRoute,
  RecordsDataIdRecordIdRoute: RecordsDataIdRecordIdRoute,
  RecordsDataIdIndexRoute: RecordsDataIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/callback",
        "/login",
        "/logout",
        "/records/",
        "/records/$dataId/$recordId",
        "/records/$dataId/"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/callback": {
      "filePath": "callback.route.tsx"
    },
    "/login": {
      "filePath": "login.route.tsx"
    },
    "/logout": {
      "filePath": "logout.route.tsx"
    },
    "/records/": {
      "filePath": "records.index.tsx"
    },
    "/records/$dataId/$recordId": {
      "filePath": "records.$dataId.$recordId.tsx"
    },
    "/records/$dataId/": {
      "filePath": "records.$dataId.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
